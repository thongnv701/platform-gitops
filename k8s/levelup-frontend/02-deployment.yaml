apiVersion: apps/v1
kind: Deployment
metadata:
  name: levelup-frontend
  namespace: levelup-frontend
  labels:
    app.kubernetes.io/name: levelup-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: levelup-frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: levelup-frontend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      initContainers:
      - name: fetch-env
        image: curlimages/curl:latest
        command:
        - /bin/sh
        - -c
        - |
          echo "=== Fetching .env for frontend ==="

          if [ ! -f /etc/github/token ]; then
            echo "❌ GitHub token file not found!"; exit 1; fi

          TOKEN=$(cat /etc/github/token)
          if [ -z "$TOKEN" ]; then
            echo "❌ GitHub token is empty!"; exit 1; fi

          echo "Testing GitHub API access..."
          AUTH_TEST=$(curl -s -H "Authorization: token $TOKEN" https://api.github.com/user)
          echo "$AUTH_TEST" | grep -q '"login"' || { echo "❌ GitHub authentication failed"; echo "$AUTH_TEST"; exit 1; }

          echo "Fetching .env from GitHub..."
          curl -f -H "Authorization: token $TOKEN" \
               -H "Accept: application/vnd.github.v3.raw" \
               -L "https://api.github.com/repos/thongnv701/secret-key/contents/levelupaccounts/fe/dev/.env" \
               -o /env/.env

          [ $? -eq 0 ] && [ -f /env/.env ] || { echo "❌ Failed to fetch .env"; exit 1; }
          echo "✅ .env fetched: $(wc -c < /env/.env) bytes"
        volumeMounts:
        - name: env-volume
          mountPath: /env
        - name: github-auth
          mountPath: /etc/github
          readOnly: true
        resources:
          requests:
            cpu: "10m"
            memory: "16Mi"
          limits:
            cpu: "50m"
            memory: "32Mi"

      containers:
      - name: levelup-frontend
        image: thongnv0701/levelup-frontend:latest
        imagePullPolicy: Always
        envFrom:
        - configMapRef:
            name: levelup-frontend-config
            optional: true
        command: ["/bin/sh","-c"]
        args:
        - |
          set -e
          if [ -f /app/env/.env ]; then
            echo "Sourcing env vars from /app/env/.env";
            set -a; . /app/env/.env; set +a;
          fi
          if [ -f .next/standalone/server.js ]; then
            echo "Starting Next.js (standalone)";
            exec node .next/standalone/server.js
          else
            echo "Starting Next.js (next start)";
            exec npx next start -p 3000
          fi
        workingDir: /app
        ports:
        - containerPort: 3000
          name: http
        volumeMounts:
        - name: env-volume
          mountPath: /app/env
        - name: next-cache
          mountPath: /app/.next/cache
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "256Mi"
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 20
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
      volumes:
      - name: env-volume
        emptyDir: {}
      - name: github-auth
        secret:
          secretName: github-auth
      - name: next-cache
        emptyDir: {}
      securityContext:
        fsGroup: 1000

